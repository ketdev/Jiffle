// The code must be in a correct state at every time, "errors" must be considered part of the "correctness" of the machine, possible states, at any time.

// Single responsibility -> isolate by tasks
// Open/Close -> everything can be extended (added components), nothing can be modified (code is const)
// Liskov substitution -> composition over inheritance
// Interface segregation -> multiple client-specific interfaces, not a single one
// Dependency Inversion -> depend on abstractions, not concretions

// Unity -> Material flow being transformed
// Transparency -> No disparity of what you see and what happends. All you type happens, and nothing more
// Continuity -> Small changes to material cause small changes to behavior
// Immediacy -> The effect of each change is seen immediately
// Interactivity -> Interactive conversation with machine, until reach a desired behavior.
// Reversibility -> Any immediate recent change can be undone

/*
	JIFFLE PRINCIPLES: 
	
			"Declarative symbols, flow based behavior, data-oriented functional language."
		
		// - Strongly & Static typed
		
	1. DATA
		
		The data type IS the identifier; a chair is a chair.
				
	1.0 DATA IS EVERYTHING
		
		The program is a sequence of commands. Commands are primitive types.

	1.1 SINGLE RESPONSIBILITY 
		Isolate modules by tasks, do single responsibility task.
		The same task shouldn't be segregated between modules (object methods)
		The same (polymorphic) task should be able to transform all the relevant data types.		
		
	1.X UNITY
		No 'input' and 'output', instead there is working material flow (possibly always there)
		and transformations to that material. Start of application is irrelevant. No specific sequence
		
	1.X TRANSPARENCY
		The tool is invisible to the programmers perception, no 'runtime' and 'compiletime',
		and worrying when something happens. Everything happens all the time, async.
		Dependencies are automatically computed, just as our brain does when we see the same name in two places.
		f.ex. 	if you write print, it immediateliy shows it in the display console
				if you say to exit the program, it immediately closes the editor 
				(asking if you meaned it :), and removing the written expression if not)
		
	1.2 OPEN/CLOSED
		We like to talk about a specific component of a thing, without mentioning the whole structure. Knowing all the parts of a car is not interesting when you want to talk about the motor.
	
		Structure is not known a-priory, components should be defined 
		on demand, open for extensions, while remaining inmutable
		for existing variations.
		
		Reverse the structure declaration, declare components' belonging set, 
		not the components of a set. (stronger than inheritance)
		
		Each set shouldn't have to define all its items.
		Every item can be declared as being part of another set.
		An item can be part of multiple sets (multiple belonging)
		
		
	1.3 LISKOV SUBSTITUTION
		Polymorphic functions based on data properties,
		not polymorphic data with shared behavior.
		
		Composition over inheritance: 
		Items `belong` to another set, defining shared behavior.
		
		
		Data holds the 'HAS-A' relationship with its type.
		
		Data definition is like defining a db table,
		where the type itself is the column name.
			
		Accessing data is selecting from that table,
		omitting column names returns the whole table.
		
	1.4 We are really bad at counting/iterating things
		The computer is really good at it. Let it do it.
		
		No for/while loops, instead: collections!!
		
	1.5 Conditionals are sign of missing polymorphism
	
		Behavior is the differentiator
	
	1.6 All (basic) operations can be divided into unary or binary operations
		More than that are composed of smaller operations
		
	1.7 Delegate & Lazy!
		
	1.8 Cannot mutate existing state (cannot change the past), 
		but CAN append changes, updating the future

	2. CODE
	
	2.0 What you see, is running right now
		No 'run-time', 'compile-time' worries. 
		No compilation steps, what you type is what immediately executes
		Syntax errors are part of the possible machine execution, so every file can be 'executed',
		the machine just wont be able to understand everything, like hearing Chinese (for non-chinese ofc)
		
	2.0 Order doesn't matter, dependencies do
	
	2.0 The past doesn't change, the present does, based on the past
		Memory isn't replaced, it's appended
	
	2.0 (VISUAL) If the compiler can infer in a single way, then the programmer shouldn't
		need to write it for clarity (redundant, no single responsibility), 
		the compiler should show it for him automatically.
		Jiffle provides automatic data hierarchy structuring and function type display utilities.
		The programmer does not define them explicitly, but constructively. (open/close principle)
	
	2.0 The code is inmutable, no state, no side effects
		When a function has a side effect another function must be called to undo it.
		Separated in time, f.ex. open/close, malloc/free, etc...
		When not done properly, causes leaks. 
		GC proclaims we are bad at handling side effects.
		assertEqual(f(x),f(x)) must always pass!
		
		Also, since inmutable, we can reuse the result of a previous computation when needed.
		Memoization: The compiler is responsible for only calling each computation once
		
	2.0 Procedures is the transformation (managed mutation) of data and should be 
		treated as a transaction. We have an input state, and an output state.
		The input is locked until the function returns the output
		Transformations manage state mutations
		
		{ // managed side-effect: malloc/open/c'tor...
			// what to do with the captured state
		} // side-effect undo: // free/close/d'tor...
	
		Control flow is based of sequential commands, and callback block:
		if, for, while, open/close, malloc/free all require callback blocks 
		Callbacks are (other) transformations over a specific met case or requirement
		They can be asyncroneous, thus every callback execution block might not be 
		invoked at all (f.ex. if only invokes if the first parameter is true)
		
		If block invokation sequence is unknown, then we can optimize and compute only 
		when required. So the if statement is evaluated only when the output is required.
		aka. functions arent called when they are defined, only when required by other functions.
		
		Except continuous commands, which execute upon declaration, 
		and can keep running virtually forever. (like main, threads, producers, ...)
		
	2.1 Changes should behave like source-control, they do not modify the original
		they just add the (minimal) changes onto it.
	
		2.b No Locking, they mean you have side-effects	
		2.c no GOTO
		2.d no Pointers to functions
		2.e no State
		
	2.1 Concurrency
		Journaling
		Consistency
		Transactions
	
	2.1 Disciplines (Mutually exclusive)
		a. Structured Programming: Direct transfer of control (function calls)
		b. Object Oriented: Indirect transfer of control (virtual messages)
		c. Functional Programming: Change of state
	Programs can be structured, object oriented and functional
	
	2.1 Everything is an expression. ???? why?
	
		Every line of code is data, which when parsed by the compiler
		returns more data. Thus, each line of code produces output.
	
		* Functions and Definitions produce type data;
		* Variables produce allocated data;
		* Code returns the result of that code operation.
	
	2.2 No side-effects
	
		Each function operates only on it's input and output
		Nothing else is allowed to be touched. But the input 
		and output can be altered in any way.
		* Capture is allowed with the using keyword.
		
	2.3 Easy testing, easy compile time execution
	
		Thanks to no side effects, testing each function is 
		very straight forward. Without worrying about unknown
		internal functionality. 
		Also by using macros, every function can be invoked
		during compile time.
*/
